import { IsARequest, RequestResponseType, ServiceRequest, ServiceRequestFactory, ServiceRequestFactoryRequestType } from './request';
export interface Dispatcher {
    dispatch<R extends ServiceRequest>(request: R): RequestResponseType<R>;
}
export declare class ServiceBus implements Dispatcher {
    readonly handlers: Handler[];
    constructor(handlers?: Handler[]);
    addHandler(handler: HandlerFn, name: string, description?: string): void;
    addHandler(handler: Handler): void;
    dispatch<R extends ServiceRequest>(request: R): RequestResponseType<R>;
    defaultHandler(request: ServiceRequest): import("./request").ServiceResponseFailure<unknown>;
    protected reduceHandlers<R extends ServiceRequest>(handlers: readonly Handler[], request: R, dispatcher: Dispatcher, defaultHandler: HandleRequest): HandleRequest;
}
export declare function createServiceBus(handlers?: Handler[]): ServiceBus;
export declare type HandleRequestFn<R extends ServiceRequest> = (request: R, next: HandleRequest, dispatch: Dispatcher) => RequestResponseType<R>;
export interface HandleRequest {
    <R extends ServiceRequest>(request: R): any;
}
export interface HandleRequestKnown<R extends ServiceRequest> {
    (request: R): RequestResponseType<R>;
}
export declare type FactoryRequestHandler<T extends ServiceRequestFactory<ServiceRequest>, R extends ServiceRequest = ServiceRequestFactoryRequestType<T>> = HandleRequestKnown<R>;
export interface HandlerNext {
    (next: HandleRequest): HandleRequest;
}
export interface HandlerFn {
    (dispatcher: Dispatcher): HandlerNext;
}
export interface Handler {
    /**
     * Name of the Handler.
     * Useful for debugging and uncaught exceptions.
     */
    readonly name: string;
    /**
     * Optional description of the Handler.
     */
    readonly description?: string | undefined;
    readonly fn: HandlerFn;
}
export declare function createIsRequestHandlerFn<T extends ServiceRequest>(isA: IsARequest<T>, fn: HandleRequestFn<T>): HandlerFn;
export declare function createIsRequestHandler<T extends ServiceRequest>(isA: IsARequest<T>, fn: HandleRequestFn<T>, name: string, description?: string): Handler;
export declare function createRequestHandler<T extends ServiceRequest>(requestDef: ServiceRequestFactory<T>, fn: HandleRequestFn<T>, name?: string, description?: string): Handler;
export declare class ErrorUnhandledRequest extends Error {
    readonly request: ServiceRequest;
    constructor(request: ServiceRequest);
}
export declare class ErrorServiceRequestDepthExceeded extends Error {
    readonly request: ServiceRequest;
    readonly depth: number;
    constructor(request: ServiceRequest, depth: number);
}
export declare class UnhandledHandlerError extends Error {
    readonly handlerName: string;
    readonly handlerDescription: string | undefined;
    readonly cause: unknown;
    constructor(handlerName: string, handlerDescription: string | undefined, cause: unknown);
}
//# sourceMappingURL=bus.d.ts.map