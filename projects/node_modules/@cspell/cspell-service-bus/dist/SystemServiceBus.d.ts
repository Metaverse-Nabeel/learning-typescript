import { Dispatcher, Handler, HandleRequestFn } from './bus';
import { ServiceRequest, ServiceRequestFactory } from './request';
export interface SystemServiceBus extends Dispatcher {
    registerHandler(requestPrefix: string, handler: Handler): void;
    registerRequestHandler<T extends ServiceRequest>(requestDef: ServiceRequestFactory<T>, fn: HandleRequestFn<T>, name?: string | undefined, description?: string | undefined): void;
    createSubsystem(name: string, requestPattern: string | RegExp): SubsystemServiceBus;
    readonly subsystems: SubsystemServiceBus[];
}
export declare function createSystemServiceBus(): SystemServiceBus;
export declare const RequestRegisterHandlerFactory: ServiceRequestFactory<ServiceRequest<"System:RegisterHandler", {
    readonly requestPrefix: string;
    readonly handler: Handler;
}, SubsystemServiceBus>, {
    readonly requestPrefix: string;
    readonly handler: Handler;
}, "System:RegisterHandler">;
export declare const RequestCreateSubsystemFactory: ServiceRequestFactory<ServiceRequest<"System:CreateSubsystem", {
    readonly name: string;
    readonly requestPattern: string | RegExp;
}, SubsystemServiceBus>, {
    readonly name: string;
    readonly requestPattern: string | RegExp;
}, "System:CreateSubsystem">;
interface SubsystemServiceBus extends Dispatcher {
    readonly name: string;
    readonly requestPattern: string | RegExp;
    readonly handler: Handler;
}
export declare function createSubsystemServiceBus(name: string, requestPattern: string | RegExp): SubsystemServiceBus;
export {};
//# sourceMappingURL=SystemServiceBus.d.ts.map